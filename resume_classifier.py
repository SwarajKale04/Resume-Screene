# -*- coding: utf-8 -*-
"""Resume_Classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QQYIAu5eNvkfMZ2HpCWSniBVRshHynCl
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import re
import nltk

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix

nltk.download('stopwords')
from nltk.corpus import stopwords

# Clean text
def clean_text(text):
    text = re.sub(r'\W', ' ', text)
    text = text.lower()
    text = re.sub(r'\s+', ' ', text)
    return text

# Load CSV (after uploading)
df = pd.read_csv("UpdatedResumeDataSet.csv")
df['cleaned_resume'] = df['Resume'].apply(clean_text)

# TF-IDF + Train/Test
tfidf = TfidfVectorizer(stop_words='english', max_features=1000)
X = tfidf.fit_transform(df['cleaned_resume']).toarray()
y = df['Category']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Evaluation
y_pred = model.predict(X_test)
print("Classification Report:\n", classification_report(y_test, y_pred))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True)
plt.show()

# Predict role from raw resume
def predict_role(text):
    cleaned = clean_text(text)
    vector = tfidf.transform([cleaned]).toarray()
    return model.predict(vector)[0]

# Predict with confidence
def predict_role_confidence(text):
    cleaned = clean_text(text)
    vector = tfidf.transform([cleaned]).toarray()
    proba = model.predict_proba(vector)[0]
    idx = np.argmax(proba)
    return model.classes_[idx], round(proba[idx] * 100, 2)

# Sample input
sample_resume = """
Experienced in Python, machine learning, and data visualization.
Worked on predictive models, cleaned large datasets, deployed solutions using Flask and cloud.
Familiar with TensorFlow, Pandas, NumPy, and GCP.
"""

role = predict_role(sample_resume)
role_conf, confidence = predict_role_confidence(sample_resume)

print("Predicted Role:", role)
print("Predicted with confidence:", role_conf, f"{confidence}%")